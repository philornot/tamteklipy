"""
Inicjalizacja bazy danych - tworzenie tabel
"""
import logging

from app.core.database import engine, Base, check_database_connection, get_database_info, SessionLocal
from app.models import User, Clip, Award
from app.models.award_type import AwardType

logger = logging.getLogger(__name__)


def init_db():
    """
    Tworzy wszystkie tabele w bazie danych
    """
    logger.info("Sprawdzanie po≈ÇƒÖczenia z bazƒÖ danych...")

    if not check_database_connection():
        logger.error("Nie mo≈ºna po≈ÇƒÖczyƒá siƒô z bazƒÖ danych!")
        return False

    logger.info("Tworzenie tabel w bazie danych...")
    Base.metadata.create_all(bind=engine)
    logger.info("Tabele utworzone pomy≈õlnie!")

    # Seeduj podstawowe AwardTypes
    seed_award_types()

    # Wy≈õwietl informacje o bazie
    db_info = get_database_info()
    logger.info(f"SQLite version: {db_info.get('sqlite_version')}")
    logger.info(f"Tabele w bazie: {db_info.get('tables')}")

    return True


def seed_award_types():
    """Seeduje podstawowe typy nagr√≥d je≈õli nie istniejƒÖ"""
    db = SessionLocal()
    try:
        existing_count = db.query(AwardType).count()
        if existing_count > 0:
            logger.info(f"AwardTypes ju≈º istniejƒÖ ({existing_count}), pomijam seedowanie")
            return

        award_types = [
            AwardType(
                name="award:epic_clip",
                display_name="Epic Clip",
                description="Za epicki moment w grze",
                icon="üî•",
                color="#FF4500"
            ),
            AwardType(
                name="award:funny",
                display_name="Funny Moment",
                description="Za zabawnƒÖ sytuacjƒô",
                icon="üòÇ",
                color="#FFD700"
            ),
            AwardType(
                name="award:pro_play",
                display_name="Pro Play",
                description="Za profesjonalnƒÖ zagrywkƒô",
                icon="‚≠ê",
                color="#4169E1"
            ),
            AwardType(
                name="award:clutch",
                display_name="Clutch",
                description="Za clutch w trudnej sytuacji",
                icon="üí™",
                color="#32CD32"
            ),
            AwardType(
                name="award:wtf",
                display_name="WTF Moment",
                description="Za totalnie nieoczekiwanƒÖ sytuacjƒô",
                icon="ü§Ø",
                color="#9370DB"
            )
        ]

        for award_type in award_types:
            db.add(award_type)
            logger.debug(f"Created AwardType: {award_type.name}")

        db.commit()
        logger.debug(f"Seedowano {len(award_types)} typ√≥w nagr√≥d")

    except Exception as e:
        db.rollback()
        logger.error(f"B≈ÇƒÖd podczas seedowania AwardTypes: {e}")
    finally:
        db.close()


def drop_db():
    """
    Usuwa wszystkie tabele z bazy danych (OSTRO≈ªNIE!)
    """
    logger.warning("UWAGA: Usuwanie wszystkich tabel z bazy danych!")
    Base.metadata.drop_all(bind=engine)
    logger.info("Tabele usuniƒôte")


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    init_db()
